#!/usr/bin/env python
#
# Generate kinematic motion to control the position/orientation of some
# operational points of the NAO robot
#
# To use it:
#
#     1) If floating base is not used (fbase = False):
#            roslaunch nao_oscr display.launch
#        If floating base is used (fbase = True):
#            roslaunch nao_oscr display_floating.launch
#
#     2) + Option 1 (interactive):
#          roscd nao_oscr/scripts/motion; ipython -i nao_motion_py
#        + Option 2:
#          rosrun nao_oscr nao_motion_py
#


from optparse import OptionParser
import numpy as np

import rospy
#from nao_oscr import NaoRosRobot
from oscr.ros_kine_sim import RosKineSim
from oscr.utils import incPosition, incPoseLocal


if __name__ == '__main__':

    # Parse the arguments
    parser = OptionParser()
    parser.add_option("--back", dest="back", default="pin",
                      help="back can be pin (default), rbdl, or ff6dof")
    parser.add_option("--base", dest="base", default="floating",
                      help="base can be floating (default) or fixed")
    parser.add_option("--solver", dest="solver", default="hqp",
                      help="solver can be hqp (default), ns (nullspace) or \
                      wqp (weighted qp")
    (options, args) = parser.parse_args()
    # Backend: 'pin' (default) or 'rbdl'
    backend = options.back
    # Floating base? 'floating' (default) or 'fixed'
    if (options.base=='floating'): fbase = True
    elif (options.base=='fixed'): fbase = False
    else: print 'Option not supported: use floating or fixed'
    # Solver
    solvertype = options.solver
        
    # Frequency
    f = 100.0
    # Robot simulation instance ('pin' or 'rbdl')
    #robot = NaoRosRobot('naoMotionPy', f, fbase, backend)
    sim = RosKineSim('naoMotion', 'nao_oscr',
                     '/urdf/naoV40red.urdf', f, fbase, backend)

    # Joint configuration
    if (fbase):
        q = np.array([[0.0, 0.0, 0.33046, 1.0, 0.0, 0.0, 0.0,
                       0.0, 0.0,
                       0.0, 0.0, -0.1, 0.3, -0.2, 0.0,
                       1.15,  0.10, -1.4, -0.79, 0.0, 0.0,
                       0.0, 0.0, -0.1, 0.3, -0.2, 0.0,
                       1.15, -0.10,  1.4,  0.79, 0.0, 0.0]]).T
    else:
        q = sim.robot.ndof*[0.,]
    # Set the configuration to the robot
    sim.update(q)

    # Initialize solver: use 'HQP', 'NS' or 'WQP'
    if solvertype == 'hqp': sim.initKineSolver(q)  # default is HQP
    elif solvertype == 'ns': sim.initKineSolver(q, 'NS')
    elif solvertype == 'wqp': sim.initKineSolver(q, 'WQP')
    else: print 'Solver type not supported'
            
    if (fbase):
        # Tasks
        sim.initKineTaskPose('r_wrist','pose','RHand')
        sim.initKineTaskPose('l_ankle','pose','LAnkle')
        sim.initKineTaskPose('r_ankle','pose','RAnkle')
        
        # Keep ankles wihtout motion
        sim.task['LAnkle'].keep(10.0)
        sim.task['RAnkle'].keep(10.0)
        # desiredLAnkle = sim.task['LAnkle'].getDesiredValue()
        # desiredRAnkle = sim.task['RAnkle'].getDesiredValue()
        # sim.task['LAnkle'].marker[1].setPose(desiredLAnkle)
        # sim.task['RAnkle'].marker[1].setPose(desiredRAnkle)

        # Set desired pose for the hand
        currentRHand = sim.task['RHand'].getSensedValue()
        desiredRHand = incPoseLocal(currentRHand,
                                    (-0.05, -0.05, 0.06),
                                    (-50., (1., 0., 0.)))
        #desiredRHand = incPosition(currentRHand, [-0.10, -0.05, 0.10])
        sim.task['RHand'].setDesiredValue(desiredRHand)

        # Add task to the solver
        sim.pushTask(sim.task['LAnkle'])
        sim.pushTask(sim.task['RAnkle'])
        sim.pushTask(sim.task['RHand'])

    else:
        # Task
        sim.addKineTaskPose('r_wrist', 'position', 'RHand')
        # Set desired pose for the hand
        currentPosHand = sim.task['RHand'].getCurrentValue()
        desiredPosHand = incPosition(currentPosHand, [-0.05, 0., 0.05])
        sim.task['RHand'].setDesiredValue(desiredPosHand)
        sim.task['RHand'].marker[1].setPose(desiredPosHand)
        # Add task to the solver
        sim.solver.pushTask(sim.task['RHand']);

    # When using an interactive session (with ipython) and a single task,
    # it is recommended to use doTask. After task completion, update the
    # desired pose and call doTask again
    # doTask(sim, 'RHand', desiredPosHand, 0.005)

    while not rospy.is_shutdown():
    #for i in xrange(1):
        # When using rosrun (noninteractive) the following is recommended
        qdes = sim.getPositionControl(q)
        sim.update(qdes)
        q = qdes.copy()
        sim.rate.sleep()
