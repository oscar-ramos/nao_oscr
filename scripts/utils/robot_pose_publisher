#!/usr/bin/env python
#
# Listen to TransformStamped messages and publish them to tf setting the pose
# of the robot base (contained in the first 6 elements of joint_states).
#

import roslib
import rospy

import tf
import sensor_msgs.msg

frame = ''
childFrame = ''


def pose_broadcaster(msg):
    translation = msg.position[0:3]
    # When orientation is given by RPY angles
    # rotation = tf.transformations.quaternion_from_euler(msg.position[3],
    #                                                     msg.position[4],
    #                                                     msg.position[5])
    # When orientation is given by quaternion (w,ex,ey,ez):
    rotation = (msg.position[4], msg.position[5],
                msg.position[6], msg.position[3])
    tfbr = tf.TransformBroadcaster()
    # TODO: check exactly childframe and frame
    tfbr.sendTransform(translation, rotation,
                       rospy.Time.now(), childFrame, frame)


if __name__ == '__main__':

    rospy.init_node('robot_pose_publisher', anonymous=True)

    frame = rospy.get_param('~frame', 'base_link')
    childFrame = rospy.get_param('~child_frame', 'map')
    topic = rospy.get_param('~topic', 'joint_states')

    rospy.Subscriber(topic, sensor_msgs.msg.JointState, pose_broadcaster)
    rospy.spin()
