#!/usr/bin/env python
#
# Generate kinematic motion to control the position/orientation of some
# operational points of the NAO robot
#
# To use it:
#
#     1) If floating base is used (default):
#            roslaunch nao_oscr display.launch
#            rosrun nao_oscr motion_arms
#
#        Note: For interactive mode, instead of rosrun use
#            roscd nao_oscr/scripts
#            ipython -i motion_arms
#
#     2) If floating base is not used:
#            roslaunch nao_oscr display-fixed.launch
#            rosrun nao_oscr motion_arms --base fixed
#
#


from optparse import OptionParser
import numpy as np
import time

import rospy
from oscr.ros_kine_sim import RosKineSim
from oscr.ros_logs import RosLogs
from oscr.utils import incPosition, incPoseLocal


if __name__ == '__main__':

    # Parse the arguments
    parser = OptionParser()
    parser.add_option("--back", dest="back", default="pin",
                      help="back can be pin (default), rbdl, or ff6dof")
    parser.add_option("--base", dest="base", default="floating",
                      help="base can be floating (default) or fixed")
    parser.add_option("--solver", dest="solver", default="hqp",
                      help="solver can be hqp (default), ns (nullspace) or \
                      wqp (weighted qp")
    parser.add_option("--log", dest="log", default="false",
                      help="log can be back can be true, or false (default)")
    (options, args) = parser.parse_args()
    # Backend: 'pin' (default) or 'rbdl'
    backend = options.back
    # Floating base? 'floating' (default) or 'fixed'
    if (options.base=='floating'): fbase = True
    elif (options.base=='fixed'): fbase = False
    else: print 'Option not supported: use floating or fixed'
    # Solver
    solvertype = options.solver
    # Logs
    if (options.log=='true'): do_logs = True
    else: do_logs = False
        
    # Frequency
    f = 100.0
    # Robot simulation instance ('pin' or 'rbdl')
    sim = RosKineSim('naoMotion', 'nao_oscr',
                     '/urdf/naoV40red.urdf', f, fbase, backend)

    # Joint configuration
    if (fbase):
        q = np.array([[0.0, 0.0, 0.33046, 1.0, 0.0, 0.0, 0.0,
                       0.0, 0.0,
                       0.0, 0.0, -0.1, 0.3, -0.2, 0.0,
                       1.15,  0.10, -1.4, -0.79, 0.0, 0.0,
                       0.0, 0.0, -0.1, 0.3, -0.2, 0.0,
                       1.15, -0.10,  1.4,  0.79, 0.0, 0.0]]).T
    else:
        q = np.array([sim.robot.ndof*[0.,]]).T
    # Set the configuration to the robot
    sim.update(q)

    # Initialize solver: use 'HQP', 'NS' or 'WQP'
    if solvertype == 'hqp': sim.initKineSolver(q)  # default is HQP
    elif solvertype == 'ns': sim.initKineSolver(q, 'NS')
    elif solvertype == 'wqp': sim.initKineSolver(q, 'WQP')
    else: print 'Solver type not supported'
            
    if (fbase):
        # Tasks
        sim.initKineTaskPose('r_wrist','pose','RHand')
        sim.initKineTaskPose('l_wrist','pose','LHand')
        sim.initKineTaskPose('l_ankle','pose','LAnkle')
        sim.initKineTaskPose('r_ankle','pose','RAnkle')

        # Logs
        logs = RosLogs(sim.robot.pkg+'/data/', 'motion_arms_', f, do_logs)
        logs.addTask(sim.task['LHand'])
        logs.addTask(sim.task['RHand'])
        
        # Keep ankles without motion
        sim.task['LAnkle'].keep(10.0)
        sim.task['RAnkle'].keep(10.0)

        # Set desired pose for the right hand
        currentRHand = sim.task['RHand'].getSensedValue()
        desiredRHand = incPoseLocal(currentRHand,
                                    (-0.05, -0.05, 0.08),
                                    (-50., (1., 0., 0.)))
        sim.task['RHand'].setDesiredValue(desiredRHand)

        # Set desired pose for the left hand
        currentLHand = sim.task['LHand'].getSensedValue()
        desiredLHand = incPoseLocal(currentLHand,
                                    (0.05, 0.05, 0.08),
                                    (50., (1., 0., 0.)))
        sim.task['LHand'].setDesiredValue(desiredLHand)

        # Add task to the solver
        sim.pushTask(sim.task['LAnkle'])
        sim.pushTask(sim.task['RAnkle'])
        sim.pushTask(sim.task['RHand'])
        sim.pushTask(sim.task['LHand'])

    else:
        # Tasks
        sim.initKineTaskPose('r_wrist', 'position', 'RHand')
        sim.initKineTaskPose('l_wrist', 'position', 'LHand')
        # Set desired pose for the right hand
        currentRHand = sim.task['RHand'].getSensedValue()
        desiredRHand = incPosition(currentRHand, [-0.05, 0., 0.05])
        sim.task['RHand'].setDesiredValue(desiredRHand)
        # Set desired pose for the left hand
        currentLHand = sim.task['LHand'].getSensedValue()
        desiredLHand = incPosition(currentLHand, [-0.05, 0., 0.05])
        sim.task['LHand'].setDesiredValue(desiredLHand)
        # Add task to the solver
        sim.pushTask(sim.task['RHand']);
        sim.pushTask(sim.task['LHand']);

    while not rospy.is_shutdown():
        logs.save(q)
        tic = time.time()
        qdes = sim.getPositionControl(q)
        toc = time.time()
        sim.update(qdes)
        q = qdes.copy()
        # Save the computation time
        logs.savetime(tic, toc, show=False)
        sim.rate.sleep()
    logs.close()
