#!/usr/bin/env python
#
# Generate kinematic motion to control the position/orientation of some
# operational points of the NAO robot
#
# To use it (choose from 1 to 4):
#     roslaunch nao_oscr display.launch
#     rosrun nao_oscr motion_examples --type 4
#
# Note: For interactive mode, instead of rosrun use
#     roscd nao_oscr/scripts
#     ipython -i motion_examples
#


from optparse import OptionParser
import numpy as np
import time

import rospy
from oscr.ros_kine_sim import RosKineSim
from oscr.utils import incPosition, incPoseLocal


if __name__ == '__main__':

    # Parse the arguments
    parser = OptionParser()
    parser.add_option("--back", dest="back", default="pin",
                      help="back can be pin (default) or rbdl")
    parser.add_option("--mtype", dest="mtype", default="1",
                      help="type of motion: 1, 2, 3 4")
    parser.add_option("--solver", dest="solver", default="hqp",
                      help="solver can be hqp (default), ns (nullspace) or \
                      wqp (weighted qp")
    (options, args) = parser.parse_args()
    # Backend: 'pin' (default) or 'rbdl'
    backend = options.back
    # Solver
    solvertype = options.solver
    # Motion type
    mtype = eval(options.mtype)
        
    # Frequency
    f = 100.0
    # Robot simulation instance ('pin' or 'rbdl')
    sim = RosKineSim('naoMotion', 'nao_oscr',
                     '/urdf/naoV40red.urdf', f, True, backend)

    # Joint configuration
    q = np.array([[0.0, 0.0, 0.33046, 1.0, 0.0, 0.0, 0.0,
                   0.0, 0.0,
                   0.0, 0.0, -0.1, 0.3, -0.2, 0.0,
                   1.15,  0.10, -1.4, -0.79, 0.0, 0.0,
                   0.0, 0.0, -0.1, 0.3, -0.2, 0.0,
                   1.15, -0.10,  1.4,  0.79, 0.0, 0.0]]).T
    # Set the configuration to the robot
    sim.update(q)

    # Initialize solver: use 'HQP', 'NS' or 'WQP'
    if solvertype == 'hqp': sim.initKineSolver(q)  # default is HQP
    elif solvertype == 'ns': sim.initKineSolver(q, 'NS')
    elif solvertype == 'wqp': sim.initKineSolver(q, 'WQP')
    else: print 'Solver type not supported'

    # Tasks for the legs
    sim.initKineTaskPose('l_ankle','pose','LAnkle', show_markers=False)
    sim.initKineTaskPose('r_ankle','pose','RAnkle', show_markers=False)
    # Keep ankles without motion
    sim.task['LAnkle'].keep(10.0)
    sim.task['RAnkle'].keep(10.0)
    # Add task to the solver
    sim.pushTask(sim.task['LAnkle'])
    sim.pushTask(sim.task['RAnkle'])
    
    if (mtype==1):
        # Tasks
        sim.initKineTaskPose('Head','orientation','Head')
        sim.initKineTaskPose('r_wrist','position','RHand')
        sim.task['Head'].keep(1.0)
        # Set desired pose for the right hand
        currentRHand = sim.task['RHand'].getSensedValue()
        desiredRHand = incPosition(currentRHand, [-0.05, -0.10, -0.14])
        sim.task['RHand'].setDesiredValue(desiredRHand)
        # Add tasks to the solver
        sim.pushTask(sim.task['RHand'])
        sim.pushTask(sim.task['Head'])

    elif (mtype==2):
        # Tasks
        sim.initKineTaskPose('r_wrist','position','RHand')
        sim.initKineTaskPose('l_wrist','pose','LHand', show_markers=False)
        sim.task['LHand'].keep(1.0)
        # Set desired pose for the right hand
        currentRHand = sim.task['RHand'].getSensedValue()
        desiredRHand = incPosition(currentRHand, [-0.05, -0.10, -0.16])
        sim.task['RHand'].setDesiredValue(desiredRHand)
        # Add tasks for the solver
        sim.pushTask(sim.task['RHand'])
        sim.pushTask(sim.task['LHand'])

    elif (mtype==3):
        # Base task
        sim.initKineTaskPose('base_link','pose','Base')
        # Set desired pose for the base
        currentBase = sim.task['Base'].getSensedValue()
        desiredBase = incPoseLocal(currentBase,
                                   (0.0, 0.05, -0.05),
                                   (0., (1., 0., 0.)))
        sim.task['Base'].setDesiredValue(desiredBase)
        # Add task to the solver
        sim.pushTask(sim.task['Base'])

    elif (mtype==4):
        # Base task
        sim.initKineTaskPose('base_link','pose','Base')
        sim.initKineTaskPose('r_wrist','position','RHand')
        sim.initKineTaskPose('l_wrist','position','LHand')
        # Set desired pose for the base
        currentBase = sim.task['Base'].getSensedValue()
        desiredBase = incPoseLocal(currentBase,
                                   (0.0, 0.05, -0.05),
                                   (0., (1., 0., 0.)))
        sim.task['Base'].setDesiredValue(desiredBase)
        # Set desired pose for the right hand
        currentRHand = sim.task['RHand'].getSensedValue()
        desiredRHand = incPosition(currentRHand, [-0.05, -0.02, 0.15])
        sim.task['RHand'].setDesiredValue(desiredRHand)
        # Set desired pose for the left hand
        currentLHand = sim.task['LHand'].getSensedValue()
        desiredLHand = incPosition(currentLHand, [-0.05, 0.12, 0.15])
        sim.task['LHand'].setDesiredValue(desiredLHand)
        # Add task to the solver
        sim.pushTask(sim.task['Base'])
        sim.pushTask(sim.task['RHand'])
        sim.pushTask(sim.task['LHand'])

        
    while not rospy.is_shutdown():
        qdes = sim.getPositionControl(q)
        sim.update(qdes)
        #sim.update(q)
        q = qdes.copy()
        sim.rate.sleep()
